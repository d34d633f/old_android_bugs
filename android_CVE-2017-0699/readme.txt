CVE: CVE-2017-0699

Android libavc overflows

Attached h264 stream triggers two bugs in libavc code.

How to reproduce:
1) download libavc src (repo sync external/libavc)
2) compile standalone decoder with and without ASAN
$ cd libavc/decoder
$ cp -R ../common .
$ cp ../test/decoder/main.c t1.c


If we compile decoder without ASAN and run undef gdb:
$ gdb -q ./t1 
(gdb) r -i 1.bin
...
*** Error in `/tmp/t1': double free or corruption (out): 0xf7c20080 ***

Program received signal SIGABRT, Aborted.
0xf7fdbc90 in __kernel_vsyscall ()
(gdb) bt
#0  0xf7fdbc90 in __kernel_vsyscall ()
#1  0xf7e1c687 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56
#2  0xf7e1fab3 in __GI_abort () at abort.c:89
#3  0xf7e56fd3 in __libc_message (do_abort=do_abort@entry=1, fmt=fmt@entry=0xf7f53cbc "*** Error in `%s': %s: 0x%s ***\n")
    at ../sysdeps/posix/libc_fatal.c:175
#4  0xf7e614ba in malloc_printerr (action=<optimized out>, str=0xf7f53df4 "double free or corruption (out)", ptr=0xf7c20080)
    at malloc.c:4996
#5  0xf7e6212d in _int_free (av=0xf7f99420 <main_arena>, p=<optimized out>, have_lock=0) at malloc.c:3840
#6  0x08048dbf in ih264a_aligned_free (pv_ctxt=0x0, pv_buf=0xf7c20080) at t1.c:458
#7  0x0805d039 in ih264d_free_dynamic_bufs (ps_dec=0x80cb480) at ih264d_utils.c:2226
#8  0x0804f3d5 in ih264d_delete (pv_api_op=0xfffe9fac, pv_api_ip=0xfffe9d98, dec_hdl=0x80cb400) at ih264d_api.c:3140
#9  ih264d_api_function (dec_hdl=dec_hdl@entry=0x80cb400, pv_api_ip=<optimized out>, pv_api_ip@entry=0xfffe9d98, 
    pv_api_op=pv_api_op@entry=0xfffe9fac) at ih264d_api.c:3675
#10 0x0804b974 in main (argc=3, argv=0xffffd064) at t1.c:3129
(gdb) 

Now compile with ASAN and run again:
1) we trigger first bug, out of bounds read

$ ./t1a -i 1.bin
27
Ittiam Decoder Version number: @(#)Id:H264VDEC_production Ver:05.00 Released by ITTIAM Build: Jan 31 2017 @ 14:14:27
=================================================================
==5762==ERROR: AddressSanitizer: stack-buffer-overflow on address 0xffd1c880 at pc 0x8196733 bp 0xffd1c658 sp 0xffd1c650
READ of size 16 at 0xffd1c880 thread T0
    #0 0x8196732 in ih264_intra_pred_luma_4x4_mode_diag_dr_ssse3 /dist/src/android/libavc_test/decoder/common/x86/ih264_luma_intra_pred_filters_ssse3.c:456
    #1 0x8142c8e in ih264d_process_intra_mb /dist/src/android/libavc_test/decoder/ih264d_process_intra_mb.c:1295
    #2 0x8152424 in ih264d_decode_recon_tfr_nmb /dist/src/android/libavc_test/decoder/ih264d_process_pslice.c:435
    #3 0x816ef63 in ih264d_parse_islice_data_cabac /dist/src/android/libavc_test/decoder/ih264d_parse_islice.c:1143
    #4 0x816f7d7 in ih264d_parse_islice /dist/src/android/libavc_test/decoder/ih264d_parse_islice.c:1462
    #5 0x8118775 in ih264d_parse_decode_slice /dist/src/android/libavc_test/decoder/ih264d_parse_slice.c:1885
    #6 0x8168220 in ih264d_parse_nal_unit /dist/src/android/libavc_test/decoder/ih264d_parse_headers.c:1116
    #7 0x80e3c80 in ih264d_video_decode /dist/src/android/libavc_test/decoder/ih264d_api.c:2092
    #8 0x80da6b0 in main /dist/src/android/libavc_test/decoder/t1.c:2875
    #9 0xf74e0af2 (/lib/i386-linux-gnu/libc.so.6+0x19af2)
    #10 0x80d2bd4 in _start (/tmp/t1a+0x80d2bd4)

2) comment out the vulnerable code, recompile and run decoder again, we trigger write heap overflow:
$./t1a -i 1.bin

==7938==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf4002da3 at pc 0x814b0a1 bp 0xffbaad78 sp 0xffbaad70
WRITE of size 1 at 0xf4002da3 thread T0
    #0 0x814b0a0 in ih264d_set_deblocking_parameters /dist/src/android/libavc_test/decoder/ih264d_deblocking.c:1241
    #1 0x8102554 in ih264d_mark_err_slice_skip /dist/src/android/libavc_test/decoder/ih264d_parse_pslice.c:1781
    #2 0x8115622 in ih264d_parse_decode_slice /dist/src/android/libavc_test/decoder/ih264d_parse_slice.c:1391
    #3 0x81682f0 in ih264d_parse_nal_unit /dist/src/android/libavc_test/decoder/ih264d_parse_headers.c:1116
    #4 0x80e3c80 in ih264d_video_decode /dist/src/android/libavc_test/decoder/ih264d_api.c:2092
    #5 0x80da6b0 in main /dist/src/android/libavc_test/decoder/t1.c:2875
    #6 0xf7538af2 (/lib/i386-linux-gnu/libc.so.6+0x19af2)
    #7 0x80d2bd4 in _start (/tmp/t1a+0x80d2bd4)

0xf4002da3 is located 3 bytes to the right of 5280-byte region [0xf4001900,0xf4002da0)
allocated by thread T0 here:
    #0 0x80bbb21 in __interceptor_memalign (/tmp/t1a+0x80bbb21)
    #1 0x80d2cc7 in ih264a_aligned_malloc /dist/src/android/libavc_test/decoder/t1.c:452
    #2 0x811ca1c in ih264d_allocate_dynamic_bufs /dist/src/android/libavc_test/decoder/ih264d_utils.c:1960
    #3 0x811b22e in ih264d_init_pic /dist/src/android/libavc_test/decoder/ih264d_utils.c:812
    #4 0x810f609 in ih264d_start_of_pic /dist/src/android/libavc_test/decoder/ih264d_parse_slice.c:338
    #5 0x81168f1 in ih264d_parse_decode_slice /dist/src/android/libavc_test/decoder/ih264d_parse_slice.c:1587
    #6 0x81682f0 in ih264d_parse_nal_unit /dist/src/android/libavc_test/decoder/ih264d_parse_headers.c:1116
    #7 0x80e3c80 in ih264d_video_decode /dist/src/android/libavc_test/decoder/ih264d_api.c:2092
    #8 0x80da6b0 in main /dist/src/android/libavc_test/decoder/t1.c:2875
    #9 0xf7538af2 (/lib/i386-linux-gnu/libc.so.6+0x19af2)

SUMMARY: AddressSanitizer: heap-buffer-overflow /dist/src/android/libavc_test/decoder/ih264d_deblocking.c:1241 ih264d_set_deblocking_parameters
Shadow bytes around the buggy address:
  0x3e800560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x3e800570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x3e800580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x3e800590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x3e8005a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x3e8005b0: 00 00 00 00[fa]fa fa fa fa fa fa fa fa fa fa fa
  0x3e8005c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3e8005d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3e8005e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3e8005f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3e800600: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:     fa
  Heap right redzone:    fb
  Freed heap region:     fd
  Stack left redzone:    f1
  Stack mid redzone:     f2
  Stack right redzone:   f3
  Stack partial redzone: f4
  Stack after return:    f5
  Stack use after scope: f8
  Global redzone:        f9
  Global init order:     f6
  Poisoned by user:      f7
  ASan internal:         fe
==7938==ABORTING

